#include <bits/stdc++.h>	using namespace std;	const int N=155;	const int INF=1e9+7;	int n,m,sx,sy,ex,ey,cnt=0,mn=INF;	int a[N][N],dis[2][N][N];	int dx[]={1,-1,0,0},dy[]={0,0,1,-1};	bool vis[2][N][N];	struct D{	    int x,y;	};	queue <D> q;	int main()	{	    ios::sync_with_stdio(0);	    cin.tie(0);	    cin >> n >> m >> sy >> sx >> ey >> ex;	    for(int i=1;i<=n;i++){	        for(int j=1;j<=m;j++){	            cin >> a[i][j];	        }	    }  //run from st	    q.push({sx,sy});	    dis[0][sy][sx]=0;	    vis[0][sy][sx]=true;	    while(!q.empty()){	        auto [x,y]=q.front();	        q.pop();	        //if(vis[0][y][x]) continue;	        //vis[0][y][x]=true;	        for(int i=0;i<4;i++){	            int xx=x+dx[i],yy=y+dy[i];	            if(xx<1 || xx>m || yy<1 || yy>n || vis[0][yy][xx]) continue;	            vis[0][yy][xx]=true;	            if(a[yy][xx]==0){	                dis[0][yy][xx]=dis[0][y][x]+1;	            }	            else{	                dis[0][yy][xx]=dis[0][y][x]+1;	                q.push({xx,yy});	            }	        }	    }	    //run from en	    q.push({ex,ey});	    dis[1][sy][sx]=0;	    vis[1][sy][sx]=true;	    while(!q.empty()){	        auto [x,y]=q.front();	        q.pop();	        //if(vis[1][y][x]) continue;	        //vis[1][y][x]=true;	        for(int i=0;i<4;i++){	            int xx=x+dx[i],yy=y+dy[i];	            if(xx<1 || xx>m || yy<1 || yy>n || vis[1][yy][xx]) continue;	            vis[1][yy][xx]=true;	            if(a[yy][xx]==0){	                dis[1][yy][xx]=dis[1][y][x]+1;	            }	            else{	                dis[1][yy][xx]=dis[1][y][x]+1;	                q.push({xx,yy});	            }	        }	    }	    for(int i=1;i<=n;i++){	        for(int j=1;j<=m;j++){	            if(a[i][j]==0 && dis[0][i][j]!=0 && dis[1][i][j]!=0){	                cnt++;	                mn=min(mn,dis[0][i][j]+dis[1][i][j]);	            }	        }	    }	    cout << cnt << "\n" << mn+1;	}